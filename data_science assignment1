Q1.def reverse_string(string):
    reversed_string = ''
    index = len(string) - 1

    while index >= 0:
        reversed_string += string[index]
        index -= 1

    return reversed_string

input_string = input("Enter a string: ")
reversed_string = reverse_string(input_string)
print("Reversed string:", reversed_string)

      #output
Enter a string:  gaurish
Reversed string: hsiruag



  Q2.def is_palindrome(string):
    # Remove whitespace and convert to lowercase
    string = string.replace(" ", "").lower()

    # Check if the reversed string is equal to the original string
    return string == string[::-1]

      input_string = input("Enter a string: ")
if is_palindrome(input_string):
    print("The string is a palindrome.")
else:
    print("The string is not a palindrome.")

      #output
Enter a string:  nitin
The string is a palindrome.


Q3.def find_largest_element(lst):
    if not lst:
        return None

    largest = lst[0]  # Assume the first element is the largest

    for element in lst:
        if element > largest:
            largest = element

    return largest

          input_list = input("Enter a list of numbers (separated by spaces): ").split()
input_list = [int(num) for num in input_list]  # Convert input strings to integers
largest_element = find_largest_element(input_list)
print("The largest element is:", largest_element)

          #output
Enter a list of numbers (separated by spaces):  23 34 45 67 89
The largest element is: 89


  Q.4. def count_occurrences(lst):
    occurrence_count = {}

    for element in lst:
        if element in occurrence_count:
            occurrence_count[element] += 1
        else:
            occurrence_count[element] = 1

    return occurrence_count

      input_list = input("Enter a list of elements (separated by spaces): ").split()
occurrence_count = count_occurrences(input_list)
print("Element occurrence count:")
for element, count in occurrence_count.items():
    print(element, "->", count)

      #output
Enter a list of elements (separated by spaces):  12 34 56 78 89 12
Element occurrence count:
12 -> 2
34 -> 1
56 -> 1
78 -> 1
89 -> 1


  Q5.def find_second_largest(numbers):
    if len(numbers) < 2:
        return None

    largest = second_largest = float('-inf')

    for num in numbers:
        if num > largest:
            second_largest = largest
            largest = num
        elif num > second_largest and num < largest:
            second_largest = num

    if second_largest == float('-inf'):
        return None
    else:
        return second_largest
​
num_list = [12, 34, 56, 78, 90, 32, 45]
result = find_second_largest(num_list)

if result is None:
    print("The list does not have a second largest number.")
else:
    print("The second largest number is:", result)

#output
The second largest number is: 78


Q6.def remove_duplicates(lst):
    return list(set(lst))

original_list = [1, 2, 3, 2, 4, 1, 5, 4, 6]
new_list = remove_duplicates(original_list)
print("Original List:", original_list)
print("List without duplicates:", new_list)

#output
Original List: [1, 2, 3, 2, 4, 1, 5, 4, 6]
List without duplicates: [1, 2, 3, 4, 5, 6]
​

Q7.def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

number = int(input("Enter a number: "))
result = factorial(number)
print("The factorial of", number, "is", result)

#output
Enter a number:  6
The factorial of 6 is 720


Q8.import math

def is_prime(n):
    if n <= 1:
        return False

    # Check divisibility up to the square root of n
    for i in range(2, math.isqrt(n) + 1):
        if n % i == 0:
            return False

    return True

number = int(input("Enter a number: "))
if is_prime(number):
    print(number, "is a prime number.")
else:
    print(number, "is not a prime number.")

#output
Enter a number:  7
7 is a prime number.


Q9.def sort_list(numbers):
    return sorted(numbers)

num_list = [9, 3, 7, 1, 5]
sorted_list = sort_list(num_list)
print("Original list:", num_list)
print("Sorted list:", sorted_list)

#output
Original list: [9, 3, 7, 1, 5]
Sorted list: [1, 3, 5, 7, 9]


Q10.def sum_list(numbers):
    total = 0
    for num in numbers:
        total += num
    return total

num_list = [1, 2, 3, 4, 5]
result = sum_list(num_list)
print("Sum of numbers in the list:", result)

Sum of numbers in the list: 15
​

Q11.def find_common_elements(list1, list2):
    common_elements = set(list1) & set(list2)
    return list(common_elements)

list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
common_elements = find_common_elements(list1, list2)
print("Common elements:", common_elements)

#output
Common elements: [4, 5]


Q12.def is_anagram(str1, str2):
    str1 = str1.lower().replace(" ", "")
    str2 = str2.lower().replace(" ", "")

    return sorted(str1) == sorted(str2)

string1 = input("Enter the first string: ")
string2 = input("Enter the second string: ")

if is_anagram(string1, string2):
    print("The strings are anagrams.")
else:
    print("The strings are not anagrams.")

#output

Enter the first string:  earth
Enter the second string:  heart
The strings are anagrams.
​

Q13.def generate_permutations(string):
    if len(string) <= 1:
        return [string]

    permutations = []
    for i in range(len(string)):
        char = string[i]
        remaining_chars = string[:i] + string[i+1:]
        sub_permutations = generate_permutations(remaining_chars)
        for sub_permutation in sub_permutations:
            permutations.append(char + sub_permutation)

    return permutations

input_string = input("Enter a string: ")
permutations = generate_permutations(input_string)
print("Permutations:")
for permutation in permutations:
    print(permutation)


Q14.def fibonacci(n):
    sequence = []
    if n >= 1:
        sequence.append(0)
    if n >= 2:
        sequence.append(1)

    for i in range(2, n):
        next_num = sequence[i-1] + sequence[i-2]
        sequence.append(next_num)

    return sequence

#
num_terms = int(input("Enter the number of terms: "))
fib_sequence = fibonacci(num_terms)
print("Fibonacci Sequence:")
for term in fib_sequence:
    print(term)

#Output
Enter the number of terms:  6
Fibonacci Sequence:
0
1
1
2
3
5


Q15.import numpy as np
from scipy import stats

def find_median(numbers):
    return np.median(numbers)

num_list = [9, 3, 7, 1, 5]
median = find_median(num_list)
print("List of numbers:", num_list)
print("Median:", median)

#Output
List of numbers: [9, 3, 7, 1, 5]
Median: 5.0


Q16.def is_sorted(numbers):
    for i in range(len(numbers) - 1):
        if numbers[i] > numbers[i + 1]:
            return False
    return True

# Example usage
num_list = [1, 2, 3, 4, 5]
if is_sorted(num_list):
    print("The list is sorted in non-decreasing order.")
else:
    print("The list is not sorted in non-decreasing order.")

#Output
The list is sorted in non-decreasing order.



Q17.def find_intersection(list1, list2):
    return list(set(list1) & set(list2))

# Example usage
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
intersection = find_intersection(list1, list2)
print("Intersection:", intersection)

#Output
Intersection: [4, 5]


Q18.def max_subarray_sum(numbers):
    max_sum = numbers[0]
    current_sum = numbers[0]

    for i in range(1, len(numbers)):
        current_sum = max(numbers[i], current_sum + numbers[i])
        max_sum = max(max_sum, current_sum)

    return max_sum


num_list = [-1,2,-3,4,-5,6,-7,8,-9]
max_sum = max_subarray_sum(num_list)
print("List of numbers:", num_list)
print("Maximum subarray sum:", max_sum)

#output
List of numbers: [-1, 2, -3, 4, -5, 6, -7, 8, -9]
Maximum subarray sum: 8



Q19.def remove_vowels(string):
    vowels = "aeiouAEIOU"
    string_without_vowels = ""

    for char in string:
        if char not in vowels:
            string_without_vowels += char

    return string_without_vowels

# Example usage
input_string = input("Enter a string: ")
string_without_vowels = remove_vowels(input_string)
print("String without vowels:", string_without_vowels)

#OUTPUT
Enter a string:  GAURISH
String without vowels: GRSH



Q.20.def reverse_words(sentence):
    words = sentence.split()
    reversed_sentence = ' '.join(reversed(words))
    return reversed_sentence

# Example usage
input_sentence = input("Enter a sentence: ")
reversed_sentence = reverse_words(input_sentence)
print("Reversed sentence:", reversed_sentence)

#output
Enter a sentence:  Kane was a monster in wwe 
Reversed sentence: wwe in monster a was Kane
​
